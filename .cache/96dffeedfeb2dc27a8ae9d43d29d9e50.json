{"dependencies":[{"name":"../src/jsocr","loc":{"line":3,"column":22}},{"name":"vue/dist/vue.esm.browser","loc":{"line":4,"column":32}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsocr_1 = require(\"../src/jsocr\");\nvar vue_esm_browser_1 = require(\"vue/dist/vue.esm.browser\");\nfunction loadScript(url, cb) {\n    var head = document.querySelector('head');\n    var script = document.createElement('script');\n    script.src = url;\n    if (cb) {\n        script.onload = cb;\n    }\n    head.appendChild(script);\n}\nvar scripts = {\n    'copy': 'https://cdn.bootcss.com/clipboard.js/1.7.1/clipboard.min.js'\n};\nvar body = document.body;\nvar vm = new vue_esm_browser_1.default({\n    el: 'main',\n    data: {\n        showContent: false,\n        showLoading: false,\n        showAlert: false,\n        alertMsg: '',\n        token: localStorage.getItem('token'),\n        imgSrc: null,\n        source: 'b',\n        content: '',\n        ocr: null,\n        flags: {\n            enableCopy: true\n        }\n    },\n    watch: {\n        source: function (val, oldVal) {\n            this.ocr && (this.ocr.source = val);\n        }\n    },\n    methods: {\n        clickClose: function (e) {\n            console.log(e);\n            this.showContent = false;\n        },\n        clickUpload: function () {\n            this.upload(this.$refs.inputField.files[0]);\n            this.$refs.inputField.value = '';\n        },\n        upload: function (file) {\n            var _this = this;\n            try {\n                this.ocr = this.ocr || new jsocr_1.default(file);\n            }\n            catch (e) {\n                alert(e);\n                return;\n            }\n            this.ocr.source = this.source;\n            this.showLoading = true;\n            this.ocr.on('data', function (data) {\n                _this.imgSrc = typeof file === 'string' ? file : _this.ocr.img.src;\n                _this.content = data.map(function (val) { return val.words; }).join('\\n');\n                _this.showContent = true;\n                _this.showLoading = false;\n            });\n        },\n        saveToken: function () {\n            if (localStorage.getItem('token') === this.token) {\n                this.alert('Nothing change.');\n                return;\n            }\n            localStorage.setItem('token', this.token);\n            this.alert('Token saved.');\n        },\n        alert: function (msg) {\n            var _this = this;\n            this.showAlert = true;\n            this.alertMsg = msg;\n            window.setTimeout(function () {\n                _this.showAlert = false;\n            }, 3000);\n        },\n        scriptCB: function (shortcut) {\n            var _this = this;\n            switch (shortcut) {\n                case 'copy':\n                    {\n                        vue_esm_browser_1.default.nextTick(function () {\n                            var cp = new Clipboard('.copy');\n                            cp.on('success', function (e) {\n                                _this.alert('Copy Successful.');\n                                e.clearSelection();\n                            });\n                            cp.on('error', function (e) {\n                                _this.alert('Copy Failed, please copy by ctrl/command+c/v.');\n                            });\n                        });\n                    }\n                    break;\n            }\n        }\n    },\n    computed: {},\n    created: function () {\n        var _this = this;\n        Object.keys(this.flags).forEach(function (flag) {\n            var shortcut = flag.replace('enable', '').toLowerCase();\n            if (_this.flags[flag]) {\n                loadScript(scripts[shortcut], function () {\n                    _this.scriptCB(shortcut);\n                });\n            }\n        });\n        document.addEventListener('paste', function (e) {\n            var url = e.clipboardData.getData('text');\n            if (jsocr_1.toType(e.clipboardData.files[0]) === 'file') {\n                _this.upload(e.clipboardData.files[0]);\n            }\n            else if (jsocr_1.urlRegex.test(url)) {\n                console.log(url);\n                _this.upload(url);\n            }\n        });\n        document.addEventListener(\"dragover\", function (e) {\n            e.preventDefault();\n            body.classList.add('dragover');\n        });\n        document.addEventListener(\"dragleave\", function (e) {\n            e.preventDefault();\n            body.classList.remove('dragover');\n        });\n        document.addEventListener('drop', function (e) {\n            e.preventDefault();\n            _this.upload(e.dataTransfer.files[0]);\n            body.classList.remove('dragover');\n        });\n    }\n});\n"},"hash":"ab20a2c965008cb5f4c1eb2fcd1fd640"}